
F401_TMP102_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004610  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800489c  0800489c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000006c  08004910  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004910  000062d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8cd  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001975  00000000  00000000  00010969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000122e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e3  00000000  00000000  00012d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e5b  00000000  00000000  000134e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5f0  00000000  00000000  0002933e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d13  00000000  00000000  0003592e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  000bd684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c0638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004798 	.word	0x08004798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004798 	.word	0x08004798

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b988 	b.w	8000c24 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	468e      	mov	lr, r1
 8000934:	4604      	mov	r4, r0
 8000936:	4688      	mov	r8, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d14a      	bne.n	80009d2 <__udivmoddi4+0xa6>
 800093c:	428a      	cmp	r2, r1
 800093e:	4617      	mov	r7, r2
 8000940:	d962      	bls.n	8000a08 <__udivmoddi4+0xdc>
 8000942:	fab2 f682 	clz	r6, r2
 8000946:	b14e      	cbz	r6, 800095c <__udivmoddi4+0x30>
 8000948:	f1c6 0320 	rsb	r3, r6, #32
 800094c:	fa01 f806 	lsl.w	r8, r1, r6
 8000950:	fa20 f303 	lsr.w	r3, r0, r3
 8000954:	40b7      	lsls	r7, r6
 8000956:	ea43 0808 	orr.w	r8, r3, r8
 800095a:	40b4      	lsls	r4, r6
 800095c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000960:	fa1f fc87 	uxth.w	ip, r7
 8000964:	fbb8 f1fe 	udiv	r1, r8, lr
 8000968:	0c23      	lsrs	r3, r4, #16
 800096a:	fb0e 8811 	mls	r8, lr, r1, r8
 800096e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000972:	fb01 f20c 	mul.w	r2, r1, ip
 8000976:	429a      	cmp	r2, r3
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0x62>
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000980:	f080 80ea 	bcs.w	8000b58 <__udivmoddi4+0x22c>
 8000984:	429a      	cmp	r2, r3
 8000986:	f240 80e7 	bls.w	8000b58 <__udivmoddi4+0x22c>
 800098a:	3902      	subs	r1, #2
 800098c:	443b      	add	r3, r7
 800098e:	1a9a      	subs	r2, r3, r2
 8000990:	b2a3      	uxth	r3, r4
 8000992:	fbb2 f0fe 	udiv	r0, r2, lr
 8000996:	fb0e 2210 	mls	r2, lr, r0, r2
 800099a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800099e:	fb00 fc0c 	mul.w	ip, r0, ip
 80009a2:	459c      	cmp	ip, r3
 80009a4:	d909      	bls.n	80009ba <__udivmoddi4+0x8e>
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ac:	f080 80d6 	bcs.w	8000b5c <__udivmoddi4+0x230>
 80009b0:	459c      	cmp	ip, r3
 80009b2:	f240 80d3 	bls.w	8000b5c <__udivmoddi4+0x230>
 80009b6:	443b      	add	r3, r7
 80009b8:	3802      	subs	r0, #2
 80009ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009be:	eba3 030c 	sub.w	r3, r3, ip
 80009c2:	2100      	movs	r1, #0
 80009c4:	b11d      	cbz	r5, 80009ce <__udivmoddi4+0xa2>
 80009c6:	40f3      	lsrs	r3, r6
 80009c8:	2200      	movs	r2, #0
 80009ca:	e9c5 3200 	strd	r3, r2, [r5]
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d905      	bls.n	80009e2 <__udivmoddi4+0xb6>
 80009d6:	b10d      	cbz	r5, 80009dc <__udivmoddi4+0xb0>
 80009d8:	e9c5 0100 	strd	r0, r1, [r5]
 80009dc:	2100      	movs	r1, #0
 80009de:	4608      	mov	r0, r1
 80009e0:	e7f5      	b.n	80009ce <__udivmoddi4+0xa2>
 80009e2:	fab3 f183 	clz	r1, r3
 80009e6:	2900      	cmp	r1, #0
 80009e8:	d146      	bne.n	8000a78 <__udivmoddi4+0x14c>
 80009ea:	4573      	cmp	r3, lr
 80009ec:	d302      	bcc.n	80009f4 <__udivmoddi4+0xc8>
 80009ee:	4282      	cmp	r2, r0
 80009f0:	f200 8105 	bhi.w	8000bfe <__udivmoddi4+0x2d2>
 80009f4:	1a84      	subs	r4, r0, r2
 80009f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80009fa:	2001      	movs	r0, #1
 80009fc:	4690      	mov	r8, r2
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0e5      	beq.n	80009ce <__udivmoddi4+0xa2>
 8000a02:	e9c5 4800 	strd	r4, r8, [r5]
 8000a06:	e7e2      	b.n	80009ce <__udivmoddi4+0xa2>
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	f000 8090 	beq.w	8000b2e <__udivmoddi4+0x202>
 8000a0e:	fab2 f682 	clz	r6, r2
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	f040 80a4 	bne.w	8000b60 <__udivmoddi4+0x234>
 8000a18:	1a8a      	subs	r2, r1, r2
 8000a1a:	0c03      	lsrs	r3, r0, #16
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	b280      	uxth	r0, r0
 8000a22:	b2bc      	uxth	r4, r7
 8000a24:	2101      	movs	r1, #1
 8000a26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a32:	fb04 f20c 	mul.w	r2, r4, ip
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d907      	bls.n	8000a4a <__udivmoddi4+0x11e>
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x11c>
 8000a42:	429a      	cmp	r2, r3
 8000a44:	f200 80e0 	bhi.w	8000c08 <__udivmoddi4+0x2dc>
 8000a48:	46c4      	mov	ip, r8
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a58:	fb02 f404 	mul.w	r4, r2, r4
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x144>
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x142>
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	f200 80ca 	bhi.w	8000c02 <__udivmoddi4+0x2d6>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	1b1b      	subs	r3, r3, r4
 8000a72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a76:	e7a5      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a78:	f1c1 0620 	rsb	r6, r1, #32
 8000a7c:	408b      	lsls	r3, r1
 8000a7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a82:	431f      	orrs	r7, r3
 8000a84:	fa0e f401 	lsl.w	r4, lr, r1
 8000a88:	fa20 f306 	lsr.w	r3, r0, r6
 8000a8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a94:	4323      	orrs	r3, r4
 8000a96:	fa00 f801 	lsl.w	r8, r0, r1
 8000a9a:	fa1f fc87 	uxth.w	ip, r7
 8000a9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000aa2:	0c1c      	lsrs	r4, r3, #16
 8000aa4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000aa8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000aac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x1a0>
 8000ab8:	193c      	adds	r4, r7, r4
 8000aba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000abe:	f080 809c 	bcs.w	8000bfa <__udivmoddi4+0x2ce>
 8000ac2:	45a6      	cmp	lr, r4
 8000ac4:	f240 8099 	bls.w	8000bfa <__udivmoddi4+0x2ce>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	443c      	add	r4, r7
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	fa1f fe83 	uxth.w	lr, r3
 8000ad4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad8:	fb09 4413 	mls	r4, r9, r3, r4
 8000adc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ae0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d908      	bls.n	8000afa <__udivmoddi4+0x1ce>
 8000ae8:	193c      	adds	r4, r7, r4
 8000aea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000aee:	f080 8082 	bcs.w	8000bf6 <__udivmoddi4+0x2ca>
 8000af2:	45a4      	cmp	ip, r4
 8000af4:	d97f      	bls.n	8000bf6 <__udivmoddi4+0x2ca>
 8000af6:	3b02      	subs	r3, #2
 8000af8:	443c      	add	r4, r7
 8000afa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000afe:	eba4 040c 	sub.w	r4, r4, ip
 8000b02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b06:	4564      	cmp	r4, ip
 8000b08:	4673      	mov	r3, lr
 8000b0a:	46e1      	mov	r9, ip
 8000b0c:	d362      	bcc.n	8000bd4 <__udivmoddi4+0x2a8>
 8000b0e:	d05f      	beq.n	8000bd0 <__udivmoddi4+0x2a4>
 8000b10:	b15d      	cbz	r5, 8000b2a <__udivmoddi4+0x1fe>
 8000b12:	ebb8 0203 	subs.w	r2, r8, r3
 8000b16:	eb64 0409 	sbc.w	r4, r4, r9
 8000b1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b22:	431e      	orrs	r6, r3
 8000b24:	40cc      	lsrs	r4, r1
 8000b26:	e9c5 6400 	strd	r6, r4, [r5]
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	e74f      	b.n	80009ce <__udivmoddi4+0xa2>
 8000b2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b32:	0c01      	lsrs	r1, r0, #16
 8000b34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4638      	mov	r0, r7
 8000b42:	463c      	mov	r4, r7
 8000b44:	46b8      	mov	r8, r7
 8000b46:	46be      	mov	lr, r7
 8000b48:	2620      	movs	r6, #32
 8000b4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b4e:	eba2 0208 	sub.w	r2, r2, r8
 8000b52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b56:	e766      	b.n	8000a26 <__udivmoddi4+0xfa>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	e718      	b.n	800098e <__udivmoddi4+0x62>
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	e72c      	b.n	80009ba <__udivmoddi4+0x8e>
 8000b60:	f1c6 0220 	rsb	r2, r6, #32
 8000b64:	fa2e f302 	lsr.w	r3, lr, r2
 8000b68:	40b7      	lsls	r7, r6
 8000b6a:	40b1      	lsls	r1, r6
 8000b6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b74:	430a      	orrs	r2, r1
 8000b76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b86:	fb08 f904 	mul.w	r9, r8, r4
 8000b8a:	40b0      	lsls	r0, r6
 8000b8c:	4589      	cmp	r9, r1
 8000b8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b92:	b280      	uxth	r0, r0
 8000b94:	d93e      	bls.n	8000c14 <__udivmoddi4+0x2e8>
 8000b96:	1879      	adds	r1, r7, r1
 8000b98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b9c:	d201      	bcs.n	8000ba2 <__udivmoddi4+0x276>
 8000b9e:	4589      	cmp	r9, r1
 8000ba0:	d81f      	bhi.n	8000be2 <__udivmoddi4+0x2b6>
 8000ba2:	eba1 0109 	sub.w	r1, r1, r9
 8000ba6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000baa:	fb09 f804 	mul.w	r8, r9, r4
 8000bae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb8:	4542      	cmp	r2, r8
 8000bba:	d229      	bcs.n	8000c10 <__udivmoddi4+0x2e4>
 8000bbc:	18ba      	adds	r2, r7, r2
 8000bbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bc2:	d2c4      	bcs.n	8000b4e <__udivmoddi4+0x222>
 8000bc4:	4542      	cmp	r2, r8
 8000bc6:	d2c2      	bcs.n	8000b4e <__udivmoddi4+0x222>
 8000bc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bcc:	443a      	add	r2, r7
 8000bce:	e7be      	b.n	8000b4e <__udivmoddi4+0x222>
 8000bd0:	45f0      	cmp	r8, lr
 8000bd2:	d29d      	bcs.n	8000b10 <__udivmoddi4+0x1e4>
 8000bd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000bd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bdc:	3801      	subs	r0, #1
 8000bde:	46e1      	mov	r9, ip
 8000be0:	e796      	b.n	8000b10 <__udivmoddi4+0x1e4>
 8000be2:	eba7 0909 	sub.w	r9, r7, r9
 8000be6:	4449      	add	r1, r9
 8000be8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bf0:	fb09 f804 	mul.w	r8, r9, r4
 8000bf4:	e7db      	b.n	8000bae <__udivmoddi4+0x282>
 8000bf6:	4673      	mov	r3, lr
 8000bf8:	e77f      	b.n	8000afa <__udivmoddi4+0x1ce>
 8000bfa:	4650      	mov	r0, sl
 8000bfc:	e766      	b.n	8000acc <__udivmoddi4+0x1a0>
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e6fd      	b.n	80009fe <__udivmoddi4+0xd2>
 8000c02:	443b      	add	r3, r7
 8000c04:	3a02      	subs	r2, #2
 8000c06:	e733      	b.n	8000a70 <__udivmoddi4+0x144>
 8000c08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0c:	443b      	add	r3, r7
 8000c0e:	e71c      	b.n	8000a4a <__udivmoddi4+0x11e>
 8000c10:	4649      	mov	r1, r9
 8000c12:	e79c      	b.n	8000b4e <__udivmoddi4+0x222>
 8000c14:	eba1 0109 	sub.w	r1, r1, r9
 8000c18:	46c4      	mov	ip, r8
 8000c1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c1e:	fb09 f804 	mul.w	r8, r9, r4
 8000c22:	e7c4      	b.n	8000bae <__udivmoddi4+0x282>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000c32:	4a38      	ldr	r2, [pc, #224]	@ (8000d14 <HD44780_Init+0xec>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000c38:	4b37      	ldr	r3, [pc, #220]	@ (8000d18 <HD44780_Init+0xf0>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	@ (8000d1c <HD44780_Init+0xf4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HD44780_Init+0xec>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d907      	bls.n	8000c5c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000c4c:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <HD44780_Init+0xf4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <HD44780_Init+0xf4>)
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e006      	b.n	8000c6a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <HD44780_Init+0xf4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <HD44780_Init+0xf4>)
 8000c68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000c6a:	f000 f987 	bl	8000f7c <DelayInit>
  HAL_Delay(50);
 8000c6e:	2032      	movs	r0, #50	@ 0x32
 8000c70:	f000 fe06 	bl	8001880 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <HD44780_Init+0xf0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f945 	bl	8000f08 <ExpanderWrite>
  HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c82:	f000 fdfd 	bl	8001880 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c86:	2030      	movs	r0, #48	@ 0x30
 8000c88:	f000 f92c 	bl	8000ee4 <Write4Bits>
  DelayUS(4500);
 8000c8c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000c90:	f000 f99e 	bl	8000fd0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c94:	2030      	movs	r0, #48	@ 0x30
 8000c96:	f000 f925 	bl	8000ee4 <Write4Bits>
  DelayUS(4500);
 8000c9a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000c9e:	f000 f997 	bl	8000fd0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ca2:	2030      	movs	r0, #48	@ 0x30
 8000ca4:	f000 f91e 	bl	8000ee4 <Write4Bits>
  DelayUS(4500);
 8000ca8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000cac:	f000 f990 	bl	8000fd0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000cb0:	2020      	movs	r0, #32
 8000cb2:	f000 f917 	bl	8000ee4 <Write4Bits>
  DelayUS(100);
 8000cb6:	2064      	movs	r0, #100	@ 0x64
 8000cb8:	f000 f98a 	bl	8000fd0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <HD44780_Init+0xf4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f043 0320 	orr.w	r3, r3, #32
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f8cf 	bl	8000e6a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HD44780_Init+0xf8>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000cd2:	f000 f875 	bl	8000dc0 <HD44780_Display>
  HD44780_Clear();
 8000cd6:	f000 f82b 	bl	8000d30 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HD44780_Init+0xfc>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <HD44780_Init+0xfc>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f8bd 	bl	8000e6a <SendCommand>
  DelayUS(4500);
 8000cf0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000cf4:	f000 f96c 	bl	8000fd0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000cf8:	490b      	ldr	r1, [pc, #44]	@ (8000d28 <HD44780_Init+0x100>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f876 	bl	8000dec <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d00:	490a      	ldr	r1, [pc, #40]	@ (8000d2c <HD44780_Init+0x104>)
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 f872 	bl	8000dec <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d08:	f000 f81d 	bl	8000d46 <HD44780_Home>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000008b 	.word	0x2000008b
 8000d18:	2000008c 	.word	0x2000008c
 8000d1c:	20000088 	.word	0x20000088
 8000d20:	20000089 	.word	0x20000089
 8000d24:	2000008a 	.word	0x2000008a
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008

08000d30 <HD44780_Clear>:

void HD44780_Clear()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 f898 	bl	8000e6a <SendCommand>
  DelayUS(2000);
 8000d3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d3e:	f000 f947 	bl	8000fd0 <DelayUS>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HD44780_Home>:

void HD44780_Home()
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 f88d 	bl	8000e6a <SendCommand>
  DelayUS(2000);
 8000d50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d54:	f000 f93c 	bl	8000fd0 <DelayUS>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HD44780_SetCursor+0x5c>)
 8000d6e:	f107 0408 	add.w	r4, r7, #8
 8000d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HD44780_SetCursor+0x60>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	79ba      	ldrb	r2, [r7, #6]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d303      	bcc.n	8000d8a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HD44780_SetCursor+0x60>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3318      	adds	r3, #24
 8000d90:	443b      	add	r3, r7
 8000d92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f85e 	bl	8000e6a <SendCommand>
}
 8000dae:	bf00      	nop
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	bf00      	nop
 8000db8:	080047b0 	.word	0x080047b0
 8000dbc:	2000008b 	.word	0x2000008b

08000dc0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HD44780_Display+0x28>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HD44780_Display+0x28>)
 8000dd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HD44780_Display+0x28>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f844 	bl	8000e6a <SendCommand>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000089 	.word	0x20000089

08000dec <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f82a 	bl	8000e6a <SendCommand>
  for (int i=0; i<8; i++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e009      	b.n	8000e30 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f82e 	bl	8000e86 <SendChar>
  for (int i=0; i<8; i++)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	ddf2      	ble.n	8000e1c <HD44780_CreateSpecialChar+0x30>
  }
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000e48:	e006      	b.n	8000e58 <HD44780_PrintStr+0x18>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f817 	bl	8000e86 <SendChar>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f4      	bne.n	8000e4a <HD44780_PrintStr+0xa>
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f812 	bl	8000ea2 <Send>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2101      	movs	r1, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f804 	bl	8000ea2 <Send>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460a      	mov	r2, r1
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f80b 	bl	8000ee4 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f804 	bl	8000ee4 <Write4Bits>
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f809 	bl	8000f08 <ExpanderWrite>
  PulseEnable(value);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f821 	bl	8000f40 <PulseEnable>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <ExpanderWrite+0x30>)
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000f1e:	f107 020f 	add.w	r2, r7, #15
 8000f22:	230a      	movs	r3, #10
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	214e      	movs	r1, #78	@ 0x4e
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <ExpanderWrite+0x34>)
 8000f2c:	f001 f87a 	bl	8002024 <HAL_I2C_Master_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	20000090 	.word	0x20000090

08000f40 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffd8 	bl	8000f08 <ExpanderWrite>
  DelayUS(20);
 8000f58:	2014      	movs	r0, #20
 8000f5a:	f000 f839 	bl	8000fd0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffce 	bl	8000f08 <ExpanderWrite>
  DelayUS(20);
 8000f6c:	2014      	movs	r0, #20
 8000f6e:	f000 f82f 	bl	8000fd0 <DelayUS>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <DelayInit>:

static void DelayInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <DelayInit+0x4c>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <DelayInit+0x4c>)
 8000f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f8a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <DelayInit+0x4c>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <DelayInit+0x4c>)
 8000f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f96:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <DelayInit+0x50>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <DelayInit+0x50>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <DelayInit+0x50>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <DelayInit+0x50>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <DelayInit+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000fb6:	bf00      	nop
  __ASM volatile ("NOP");
 8000fb8:	bf00      	nop
  __ASM volatile ("NOP");
 8000fba:	bf00      	nop
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000edf0 	.word	0xe000edf0
 8000fcc:	e0001000 	.word	0xe0001000

08000fd0 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <DelayUS+0x44>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <DelayUS+0x48>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0c9a      	lsrs	r2, r3, #18
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <DelayUS+0x4c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <DelayUS+0x4c>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f6      	bhi.n	8000ff2 <DelayUS+0x22>
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010
 8001018:	431bde83 	.word	0x431bde83
 800101c:	e0001000 	.word	0xe0001000

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fbb9 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f903 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f9e7 	bl	8001400 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001032:	f000 f95f 	bl	80012f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001036:	f000 f9b9 	bl	80013ac <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800103a:	f000 f989 	bl	8001350 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff fdf2 	bl	8000c28 <HD44780_Init>
  HD44780_Clear();
 8001044:	f7ff fe74 	bl	8000d30 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001048:	2100      	movs	r1, #0
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fe86 	bl	8000d5c <HD44780_SetCursor>
  HD44780_PrintStr("Temperature is:");
 8001050:	486d      	ldr	r0, [pc, #436]	@ (8001208 <main+0x1e8>)
 8001052:	f7ff fef5 	bl	8000e40 <HD44780_PrintStr>
  /* USER CODE BEGIN WHILE */

	while (1)
	  {
		 // Tell TMP102 that we want to read from the temperature register
		 buf[0]=REG_TEMP;
 8001056:	2300      	movs	r3, #0
 8001058:	713b      	strb	r3, [r7, #4]
		 ret=HAL_I2C_Master_Transmit(&hi2c2, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800105a:	2390      	movs	r3, #144	@ 0x90
 800105c:	4619      	mov	r1, r3
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	4868      	ldr	r0, [pc, #416]	@ (800120c <main+0x1ec>)
 800106a:	f000 ffdb 	bl	8002024 <HAL_I2C_Master_Transmit>
 800106e:	4603      	mov	r3, r0
 8001070:	75fb      	strb	r3, [r7, #23]
		 if (ret!= HAL_OK){
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <main+0x6a>
			 strcpy((char*)buf, "Error Tx\r\n");
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4a65      	ldr	r2, [pc, #404]	@ (8001210 <main+0x1f0>)
 800107c:	ca07      	ldmia	r2, {r0, r1, r2}
 800107e:	c303      	stmia	r3!, {r0, r1}
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	3302      	adds	r3, #2
 8001084:	0c12      	lsrs	r2, r2, #16
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e06e      	b.n	8001168 <main+0x148>
		 }else {
			 //Read 2 bytes from the temperature register
			 ret = HAL_I2C_Master_Receive(&hi2c2, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 800108a:	2390      	movs	r3, #144	@ 0x90
 800108c:	4619      	mov	r1, r3
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2302      	movs	r3, #2
 8001098:	485c      	ldr	r0, [pc, #368]	@ (800120c <main+0x1ec>)
 800109a:	f001 f8c1 	bl	8002220 <HAL_I2C_Master_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	75fb      	strb	r3, [r7, #23]
			 if (ret !=HAL_OK){
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <main+0x9a>
				 strcpy((char*)buf, "Error Rx\r\n");
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001214 <main+0x1f4>)
 80010ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ae:	c303      	stmia	r3!, {r0, r1}
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	3302      	adds	r3, #2
 80010b4:	0c12      	lsrs	r2, r2, #16
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e056      	b.n	8001168 <main+0x148>
			 } else {
				 //Combine the bytes, so the first byte read is in buf[0] and second byte read is in buf[1];
				 val=((int16_t)buf[0]<<4)|(buf[1]>>4);
 80010ba:	793b      	ldrb	r3, [r7, #4]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	83fb      	strh	r3, [r7, #30]

				 //Convert to 2's complement, since temperature can be negative
				 if (val>0x7FF) {
 80010ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010d6:	db05      	blt.n	80010e4 <main+0xc4>
					 val |=0xF000;
 80010d8:	8bfb      	ldrh	r3, [r7, #30]
 80010da:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80010de:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80010e2:	83fb      	strh	r3, [r7, #30]
				 }

				 // Convert to float temperature value (Celsius)
				 temp_c = val *0.0625;
 80010e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fb4d 	bl	8000788 <__aeabi_i2d>
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b49      	ldr	r3, [pc, #292]	@ (8001218 <main+0x1f8>)
 80010f4:	f7ff f8cc 	bl	8000290 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fbac 	bl	800085c <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]

				 // Convert temperature to decimal format
				 temp_c *=100;
 8001108:	edd7 7a06 	vldr	s15, [r7, #24]
 800110c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800121c <main+0x1fc>
 8001110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001114:	edc7 7a06 	vstr	s15, [r7, #24]
				 sprintf((char*)buf, "%u.%02u C", ((unsigned int)temp_c/100), ((unsigned int)temp_c %100));
 8001118:	edd7 7a06 	vldr	s15, [r7, #24]
 800111c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001120:	ee17 2a90 	vmov	r2, s15
 8001124:	4b3e      	ldr	r3, [pc, #248]	@ (8001220 <main+0x200>)
 8001126:	fba3 2302 	umull	r2, r3, r3, r2
 800112a:	095a      	lsrs	r2, r3, #5
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001134:	ee17 1a90 	vmov	r1, s15
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <main+0x200>)
 800113a:	fba3 0301 	umull	r0, r3, r3, r1
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	fb00 f303 	mul.w	r3, r0, r3
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	1d38      	adds	r0, r7, #4
 800114a:	4936      	ldr	r1, [pc, #216]	@ (8001224 <main+0x204>)
 800114c:	f002 fe84 	bl	8003e58 <siprintf>

				 HD44780_SetCursor(0,1);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fe02 	bl	8000d5c <HD44780_SetCursor>
				 HD44780_PrintStr(buf);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe70 	bl	8000e40 <HD44780_PrintStr>
				 HAL_Delay(300);
 8001160:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001164:	f000 fb8c 	bl	8001880 <HAL_Delay>
			 }
		 }


		 // Send out buffer (temperature or error message)
		 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	1d39      	adds	r1, r7, #4
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <main+0x208>)
 800117c:	f002 fab0 	bl	80036e0 <HAL_UART_Transmit>
		 if ((unsigned int)temp_c/100>25) {
 8001180:	edd7 7a06 	vldr	s15, [r7, #24]
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 2a90 	vmov	r2, s15
 800118c:	f640 2327 	movw	r3, #2599	@ 0xa27
 8001190:	429a      	cmp	r2, r3
 8001192:	d91b      	bls.n	80011cc <main+0x1ac>
			 strcpy((char*)buf, "  Hot! Need Da Long Feng to cool it down\r\n");
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4a25      	ldr	r2, [pc, #148]	@ (800122c <main+0x20c>)
 8001198:	461c      	mov	r4, r3
 800119a:	4615      	mov	r5, r2
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a8:	c403      	stmia	r4!, {r0, r1}
 80011aa:	8022      	strh	r2, [r4, #0]
 80011ac:	3402      	adds	r4, #2
 80011ae:	0c13      	lsrs	r3, r2, #16
 80011b0:	7023      	strb	r3, [r4, #0]
			 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f813 	bl	80001e0 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	1d39      	adds	r1, r7, #4
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	4818      	ldr	r0, [pc, #96]	@ (8001228 <main+0x208>)
 80011c6:	f002 fa8b 	bl	80036e0 <HAL_UART_Transmit>
 80011ca:	e017      	b.n	80011fc <main+0x1dc>
			 } else {
				 strcpy((char*)buf, "  Not so hot, can consider reschedule\r\n");
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4a18      	ldr	r2, [pc, #96]	@ (8001230 <main+0x210>)
 80011d0:	461c      	mov	r4, r3
 80011d2:	4615      	mov	r5, r2
 80011d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e0:	e884 0003 	stmia.w	r4, {r0, r1}
				 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe fffa 	bl	80001e0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	1d39      	adds	r1, r7, #4
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <main+0x208>)
 80011f8:	f002 fa72 	bl	80036e0 <HAL_UART_Transmit>
			 }

		 HAL_Delay(1000);
 80011fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001200:	f000 fb3e 	bl	8001880 <HAL_Delay>
		 buf[0]=REG_TEMP;
 8001204:	e727      	b.n	8001056 <main+0x36>
 8001206:	bf00      	nop
 8001208:	080047c0 	.word	0x080047c0
 800120c:	200000e4 	.word	0x200000e4
 8001210:	080047d0 	.word	0x080047d0
 8001214:	080047dc 	.word	0x080047dc
 8001218:	3fb00000 	.word	0x3fb00000
 800121c:	42c80000 	.word	0x42c80000
 8001220:	51eb851f 	.word	0x51eb851f
 8001224:	080047e8 	.word	0x080047e8
 8001228:	20000138 	.word	0x20000138
 800122c:	080047f4 	.word	0x080047f4
 8001230:	08004820 	.word	0x08004820

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	@ 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fe2a 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <SystemClock_Config+0xb8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <SystemClock_Config+0xb8>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <SystemClock_Config+0xb8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <SystemClock_Config+0xbc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <SystemClock_Config+0xbc>)
 8001282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <SystemClock_Config+0xbc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fd71 	bl	8002d90 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012b4:	f000 f8cc 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 ffd4 	bl	8003280 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012de:	f000 f8b7 	bl	8001450 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	@ 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f000 fd33 	bl	8001d9c <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 f888 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000090 	.word	0x20000090
 8001348:	40005400 	.word	0x40005400
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <MX_I2C2_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_I2C2_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <MX_I2C2_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_I2C2_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_I2C2_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_I2C2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_I2C2_Init+0x50>)
 800138e:	f000 fd05 	bl	8001d9c <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f85a 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000e4 	.word	0x200000e4
 80013a4:	40005800 	.word	0x40005800
 80013a8:	000186a0 	.word	0x000186a0

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f002 f92c 	bl	8003640 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f82f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000138 	.word	0x20000138
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_GPIO_Init+0x4c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <MX_GPIO_Init+0x4c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <MX_GPIO_Init+0x4c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_GPIO_Init+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <MX_GPIO_Init+0x4c>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_GPIO_Init+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001470:	6453      	str	r3, [r2, #68]	@ 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3b      	ldr	r2, [pc, #236]	@ (80015b8 <HAL_I2C_MspInit+0x10c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12d      	bne.n	800152a <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a39      	ldr	r2, [pc, #228]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fc:	2304      	movs	r3, #4
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	482e      	ldr	r0, [pc, #184]	@ (80015c0 <HAL_I2C_MspInit+0x114>)
 8001508:	f000 fac4 	bl	8001a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151a:	6413      	str	r3, [r2, #64]	@ 0x40
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001528:	e041      	b.n	80015ae <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <HAL_I2C_MspInit+0x118>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d13c      	bne.n	80015ae <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001562:	2304      	movs	r3, #4
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <HAL_I2C_MspInit+0x114>)
 800156e:	f000 fa91 	bl	8001a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001572:	2308      	movs	r3, #8
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001576:	2312      	movs	r3, #18
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001582:	2309      	movs	r3, #9
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <HAL_I2C_MspInit+0x114>)
 800158e:	f000 fa81 	bl	8001a94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 800159c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_I2C_MspInit+0x110>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40005400 	.word	0x40005400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40005800 	.word	0x40005800

080015c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	@ (800164c <HAL_UART_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_UART_MspInit+0x88>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <HAL_UART_MspInit+0x88>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001622:	230c      	movs	r3, #12
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <HAL_UART_MspInit+0x8c>)
 800163e:	f000 fa29 	bl	8001a94 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <NMI_Handler+0x4>

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <UsageFault_Handler+0x4>

08001680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f000 f8c7 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f002 fbe0 	bl	8003eac <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20018000 	.word	0x20018000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000180 	.word	0x20000180
 8001720:	200002d0 	.word	0x200002d0

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800174c:	f7ff ffea 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fb9f 	bl	8003eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fc51 	bl	8001020 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800178c:	080048a4 	.word	0x080048a4
  ldr r2, =_sbss
 8001790:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001794:	200002d0 	.word	0x200002d0

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f931 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fe44 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f93b 	bl	8001a7a <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f000 f911 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000010 	.word	0x20000010
 8001838:	20000018 	.word	0x20000018
 800183c:	20000014 	.word	0x20000014

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000018 	.word	0x20000018
 8001864:	20000184 	.word	0x20000184

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000184 	.word	0x20000184

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000018 	.word	0x20000018

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	@ (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	@ (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	@ 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff47 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff5c 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffb0 	bl	80019e8 <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e159      	b.n	8001d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8148 	bne.w	8001d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a2 	beq.w	8001d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b57      	ldr	r3, [pc, #348]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a56      	ldr	r2, [pc, #344]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b54      	ldr	r3, [pc, #336]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a52      	ldr	r2, [pc, #328]	@ (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	@ (8001d84 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x202>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	@ (8001d88 <HAL_GPIO_Init+0x2f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1fe>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_GPIO_Init+0x2f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1fa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a46      	ldr	r2, [pc, #280]	@ (8001d90 <HAL_GPIO_Init+0x2fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1f6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	@ (8001d94 <HAL_GPIO_Init+0x300>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1f2>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	@ (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f aea2 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e12b      	b.n	8002006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fb72 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e00:	f001 fbf6 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a81      	ldr	r2, [pc, #516]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d807      	bhi.n	8001e20 <HAL_I2C_Init+0x84>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a80      	ldr	r2, [pc, #512]	@ (8002014 <HAL_I2C_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bf94      	ite	ls
 8001e18:	2301      	movls	r3, #1
 8001e1a:	2300      	movhi	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e006      	b.n	8001e2e <HAL_I2C_Init+0x92>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a7d      	ldr	r2, [pc, #500]	@ (8002018 <HAL_I2C_Init+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e7      	b.n	8002006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a78      	ldr	r2, [pc, #480]	@ (800201c <HAL_I2C_Init+0x280>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9b      	lsrs	r3, r3, #18
 8001e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d802      	bhi.n	8001e70 <HAL_I2C_Init+0xd4>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	e009      	b.n	8001e84 <HAL_I2C_Init+0xe8>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a69      	ldr	r2, [pc, #420]	@ (8002020 <HAL_I2C_Init+0x284>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	3301      	adds	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	495c      	ldr	r1, [pc, #368]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d819      	bhi.n	8001ed8 <HAL_I2C_Init+0x13c>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e59      	subs	r1, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_I2C_Init+0x138>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e59      	subs	r1, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	e051      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e04f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_I2C_Init+0x168>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_I2C_Init+0x18e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x196>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e022      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <HAL_I2C_Init+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f56:	e00f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6911      	ldr	r1, [r2, #16]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	000186a0 	.word	0x000186a0
 8002014:	001e847f 	.word	0x001e847f
 8002018:	003d08ff 	.word	0x003d08ff
 800201c:	431bde83 	.word	0x431bde83
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
 8002034:	4613      	mov	r3, r2
 8002036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fc16 	bl	8001868 <HAL_GetTick>
 800203c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	f040 80e0 	bne.w	800220c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2319      	movs	r3, #25
 8002052:	2201      	movs	r2, #1
 8002054:	4970      	ldr	r1, [pc, #448]	@ (8002218 <HAL_I2C_Master_Transmit+0x1f4>)
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fc64 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	e0d3      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_I2C_Master_Transmit+0x50>
 8002070:	2302      	movs	r3, #2
 8002072:	e0cc      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d007      	beq.n	800209a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2221      	movs	r2, #33	@ 0x21
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2210      	movs	r2, #16
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	893a      	ldrh	r2, [r7, #8]
 80020ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a50      	ldr	r2, [pc, #320]	@ (800221c <HAL_I2C_Master_Transmit+0x1f8>)
 80020da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 face 	bl	8002684 <I2C_MasterRequestWrite>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e08d      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002108:	e066      	b.n	80021d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	6a39      	ldr	r1, [r7, #32]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fd22 	bl	8002b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2b04      	cmp	r3, #4
 8002120:	d107      	bne.n	8002132 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002130:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x188>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d017      	beq.n	80021ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6a39      	ldr	r1, [r7, #32]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fd19 	bl	8002be8 <I2C_WaitOnBTFFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e01a      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d194      	bne.n	800210a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	00100002 	.word	0x00100002
 800221c:	ffff0000 	.word	0xffff0000

08002220 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	@ 0x30
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
 8002230:	4613      	mov	r3, r2
 8002232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fb18 	bl	8001868 <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	f040 8217 	bne.w	8002676 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2319      	movs	r3, #25
 800224e:	2201      	movs	r2, #1
 8002250:	497c      	ldr	r1, [pc, #496]	@ (8002444 <HAL_I2C_Master_Receive+0x224>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fb66 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	e20a      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2C_Master_Receive+0x50>
 800226c:	2302      	movs	r3, #2
 800226e:	e203      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d007      	beq.n	8002296 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2222      	movs	r2, #34	@ 0x22
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2210      	movs	r2, #16
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002448 <HAL_I2C_Master_Receive+0x228>)
 80022d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa52 	bl	8002788 <I2C_MasterRequestRead>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c4      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e198      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11b      	bne.n	800235e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e178      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	2b02      	cmp	r3, #2
 8002364:	d11b      	bne.n	800239e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002374:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	e158      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023c4:	e144      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	f200 80f1 	bhi.w	80025b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d123      	bne.n	8002420 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fc4b 	bl	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e145      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800241e:	e117      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b02      	cmp	r3, #2
 8002426:	d14e      	bne.n	80024c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	2200      	movs	r2, #0
 8002430:	4906      	ldr	r1, [pc, #24]	@ (800244c <HAL_I2C_Master_Receive+0x22c>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa76 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e11a      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
 8002442:	bf00      	nop
 8002444:	00100002 	.word	0x00100002
 8002448:	ffff0000 	.word	0xffff0000
 800244c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800245e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024c4:	e0c4      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	2200      	movs	r2, #0
 80024ce:	496c      	ldr	r1, [pc, #432]	@ (8002680 <HAL_I2C_Master_Receive+0x460>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fa27 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cb      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	4955      	ldr	r1, [pc, #340]	@ (8002680 <HAL_I2C_Master_Receive+0x460>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9f9 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e09d      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025b0:	e04e      	b.n	8002650 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb5e 	bl	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e058      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d124      	bne.n	8002650 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	2b03      	cmp	r3, #3
 800260c:	d107      	bne.n	800261e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f aeb6 	bne.w	80023c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	@ 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	00010004 	.word	0x00010004

08002684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	460b      	mov	r3, r1
 8002692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d006      	beq.n	80026ae <I2C_MasterRequestWrite+0x2a>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d003      	beq.n	80026ae <I2C_MasterRequestWrite+0x2a>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ac:	d108      	bne.n	80026c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00b      	b.n	80026d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d107      	bne.n	80026d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f91d 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026fe:	d103      	bne.n	8002708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e035      	b.n	8002778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002714:	d108      	bne.n	8002728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e01b      	b.n	8002760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	11db      	asrs	r3, r3, #7
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0306 	and.w	r3, r3, #6
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f063 030f 	orn	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	490e      	ldr	r1, [pc, #56]	@ (8002780 <I2C_MasterRequestWrite+0xfc>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f966 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e010      	b.n	8002778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4907      	ldr	r1, [pc, #28]	@ (8002784 <I2C_MasterRequestWrite+0x100>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f956 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	00010008 	.word	0x00010008
 8002784:	00010002 	.word	0x00010002

08002788 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d006      	beq.n	80027c2 <I2C_MasterRequestRead+0x3a>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d003      	beq.n	80027c2 <I2C_MasterRequestRead+0x3a>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027c0:	d108      	bne.n	80027d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e00b      	b.n	80027ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	2b11      	cmp	r3, #17
 80027da:	d107      	bne.n	80027ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f893 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002812:	d103      	bne.n	800281c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e079      	b.n	8002914 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002828:	d108      	bne.n	800283c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800282a:	897b      	ldrh	r3, [r7, #10]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	e05f      	b.n	80028fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	11db      	asrs	r3, r3, #7
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0306 	and.w	r3, r3, #6
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f063 030f 	orn	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4930      	ldr	r1, [pc, #192]	@ (800291c <I2C_MasterRequestRead+0x194>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8dc 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e054      	b.n	8002914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800286a:	897b      	ldrh	r3, [r7, #10]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4929      	ldr	r1, [pc, #164]	@ (8002920 <I2C_MasterRequestRead+0x198>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f8cc 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e044      	b.n	8002914 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f831 	bl	8002924 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d6:	d103      	bne.n	80028e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e017      	b.n	8002914 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	11db      	asrs	r3, r3, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0306 	and.w	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 030e 	orn	r3, r3, #14
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4907      	ldr	r1, [pc, #28]	@ (8002920 <I2C_MasterRequestRead+0x198>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f888 	bl	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010008 	.word	0x00010008
 8002920:	00010002 	.word	0x00010002

08002924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002934:	e048      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d044      	beq.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7fe ff93 	bl	8001868 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d139      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <I2C_WaitOnFlagUntilTimeout+0x56>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	43da      	mvns	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	e00c      	b.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	429a      	cmp	r2, r3
 8002998:	d116      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e023      	b.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10d      	bne.n	80029ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	e00c      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d093      	beq.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a26:	e071      	b.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a36:	d123      	bne.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e067      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d041      	beq.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a88:	f7fe feee 	bl	8001868 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d302      	bcc.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d136      	bne.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf14      	ite	ne
 8002aba:	2301      	movne	r3, #1
 8002abc:	2300      	moveq	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e00b      	b.n	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e021      	b.n	8002b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10c      	bne.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e00b      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f af6d 	bne.w	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b64:	e034      	b.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f8e3 	bl	8002d32 <I2C_IsAcknowledgeFailed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d028      	beq.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7fe fe73 	bl	8001868 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11d      	bne.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ba0:	d016      	beq.n	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	2b80      	cmp	r3, #128	@ 0x80
 8002bdc:	d1c3      	bne.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f89b 	bl	8002d32 <I2C_IsAcknowledgeFailed>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e034      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d028      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe fe2b 	bl	8001868 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d016      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d1c3      	bne.n	8002bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c84:	e049      	b.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d119      	bne.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e030      	b.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc8:	f7fe fdce 	bl	8001868 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d302      	bcc.n	8002cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d016      	beq.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e007      	b.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d1ae      	bne.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d48:	d11b      	bne.n	8002d82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e267      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d075      	beq.n	8002e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dae:	4b88      	ldr	r3, [pc, #544]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b85      	ldr	r3, [pc, #532]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d112      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b82      	ldr	r3, [pc, #520]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x108>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e242      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x74>
 8002df6:	4b76      	ldr	r3, [pc, #472]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a75      	ldr	r2, [pc, #468]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x98>
 8002e0e:	4b70      	ldr	r3, [pc, #448]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6f      	ldr	r2, [pc, #444]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xb0>
 8002e28:	4b69      	ldr	r3, [pc, #420]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b66      	ldr	r3, [pc, #408]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a65      	ldr	r2, [pc, #404]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fd0e 	bl	8001868 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fd0a 	bl	8001868 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e207      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xc0>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fcfa 	bl	8001868 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fcf6 	bl	8001868 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1f3      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b51      	ldr	r3, [pc, #324]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe8>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b47      	ldr	r3, [pc, #284]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d11c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b44      	ldr	r3, [pc, #272]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d116      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	4b41      	ldr	r3, [pc, #260]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1c7      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4937      	ldr	r1, [pc, #220]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e03a      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f00:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_RCC_OscConfig+0x244>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe fcaf 	bl	8001868 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fcab 	bl	8001868 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1a8      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4925      	ldr	r1, [pc, #148]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <HAL_RCC_OscConfig+0x244>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc8e 	bl	8001868 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fc8a 	bl	8001868 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e187      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d036      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_RCC_OscConfig+0x248>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe fc6e 	bl	8001868 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fe fc6a 	bl	8001868 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e167      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x200>
 8002fae:	e01b      	b.n	8002fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_RCC_OscConfig+0x248>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fc57 	bl	8001868 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	e00e      	b.n	8002fdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fc53 	bl	8001868 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d907      	bls.n	8002fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e150      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	42470000 	.word	0x42470000
 8002fd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b88      	ldr	r3, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ea      	bne.n	8002fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8097 	beq.w	8003124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b81      	ldr	r3, [pc, #516]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b7d      	ldr	r3, [pc, #500]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	4a7c      	ldr	r2, [pc, #496]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	@ 0x40
 8003016:	4b7a      	ldr	r3, [pc, #488]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b77      	ldr	r3, [pc, #476]	@ (8003204 <HAL_RCC_OscConfig+0x474>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b74      	ldr	r3, [pc, #464]	@ (8003204 <HAL_RCC_OscConfig+0x474>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a73      	ldr	r2, [pc, #460]	@ (8003204 <HAL_RCC_OscConfig+0x474>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe fc13 	bl	8001868 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe fc0f 	bl	8001868 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e10c      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b6a      	ldr	r3, [pc, #424]	@ (8003204 <HAL_RCC_OscConfig+0x474>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x2ea>
 800306c:	4b64      	ldr	r3, [pc, #400]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a63      	ldr	r2, [pc, #396]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	e01c      	b.n	80030b4 <HAL_RCC_OscConfig+0x324>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x30c>
 8003082:	4b5f      	ldr	r3, [pc, #380]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	4a5e      	ldr	r2, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6713      	str	r3, [r2, #112]	@ 0x70
 800308e:	4b5c      	ldr	r3, [pc, #368]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	4a5b      	ldr	r2, [pc, #364]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	@ 0x70
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0x324>
 800309c:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a0:	4a57      	ldr	r2, [pc, #348]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a8:	4b55      	ldr	r3, [pc, #340]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ac:	4a54      	ldr	r2, [pc, #336]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 0304 	bic.w	r3, r3, #4
 80030b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fbd4 	bl	8001868 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fe fbd0 	bl	8001868 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0cb      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ee      	beq.n	80030c4 <HAL_RCC_OscConfig+0x334>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fe fbbe 	bl	8001868 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe fbba 	bl	8001868 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0b5      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003106:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ee      	bne.n	80030f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003118:	4b39      	ldr	r3, [pc, #228]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	4a38      	ldr	r2, [pc, #224]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 800311e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003122:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a1 	beq.w	8003270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312e:	4b34      	ldr	r3, [pc, #208]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b08      	cmp	r3, #8
 8003138:	d05c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d141      	bne.n	80031c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b31      	ldr	r3, [pc, #196]	@ (8003208 <HAL_RCC_OscConfig+0x478>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fb8e 	bl	8001868 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe fb8a 	bl	8001868 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e087      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	3b01      	subs	r3, #1
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	491b      	ldr	r1, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x478>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe fb63 	bl	8001868 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe fb5f 	bl	8001868 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e05c      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x416>
 80031c4:	e054      	b.n	8003270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_RCC_OscConfig+0x478>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fb4c 	bl	8001868 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fb48 	bl	8001868 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e045      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_OscConfig+0x470>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x444>
 80031f2:	e03d      	b.n	8003270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e038      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
 8003208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800320c:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <HAL_RCC_OscConfig+0x4ec>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d028      	beq.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d121      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d11a      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	d111      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	3b01      	subs	r3, #1
 8003256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d107      	bne.n	800326c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cc      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b68      	ldr	r3, [pc, #416]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90c      	bls.n	80032bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b65      	ldr	r3, [pc, #404]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e067      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b37      	ldr	r3, [pc, #220]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4934      	ldr	r1, [pc, #208]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fe fa7a 	bl	8001868 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe fa76 	bl	8001868 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d20c      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	@ (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	@ (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe f9da 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	08004848 	.word	0x08004848
 8003444:	20000010 	.word	0x20000010
 8003448:	20000014 	.word	0x20000014

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b090      	sub	sp, #64	@ 0x40
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d00d      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003470:	2b08      	cmp	r3, #8
 8003472:	f200 80a1 	bhi.w	80035b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x34>
 800347a:	2b04      	cmp	r3, #4
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e09b      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003484:	e09b      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b53      	ldr	r3, [pc, #332]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800348a:	e098      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348c:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003496:	4b4d      	ldr	r3, [pc, #308]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b4a      	ldr	r3, [pc, #296]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	2200      	movs	r2, #0
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034b4:	2100      	movs	r1, #0
 80034b6:	4b47      	ldr	r3, [pc, #284]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b8:	fb03 f201 	mul.w	r2, r3, r1
 80034bc:	2300      	movs	r3, #0
 80034be:	fb00 f303 	mul.w	r3, r0, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	4a43      	ldr	r2, [pc, #268]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034c6:	fba0 1202 	umull	r1, r2, r0, r2
 80034ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034cc:	460a      	mov	r2, r1
 80034ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d2:	4413      	add	r3, r2
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	2200      	movs	r2, #0
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034e6:	f7fd fa09 	bl	80008fc <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4613      	mov	r3, r2
 80034f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f2:	e053      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f4:	4b35      	ldr	r3, [pc, #212]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	2200      	movs	r2, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	617a      	str	r2, [r7, #20]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	4652      	mov	r2, sl
 800350c:	465b      	mov	r3, fp
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	ebb2 080a 	subs.w	r8, r2, sl
 8003526:	eb63 090b 	sbc.w	r9, r3, fp
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800353a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800353e:	ebb2 0408 	subs.w	r4, r2, r8
 8003542:	eb63 0509 	sbc.w	r5, r3, r9
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	00eb      	lsls	r3, r5, #3
 8003550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003554:	00e2      	lsls	r2, r4, #3
 8003556:	4614      	mov	r4, r2
 8003558:	461d      	mov	r5, r3
 800355a:	eb14 030a 	adds.w	r3, r4, sl
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	eb45 030b 	adc.w	r3, r5, fp
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	2200      	movs	r2, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	60fa      	str	r2, [r7, #12]
 800358c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003590:	f7fd f9b4 	bl	80008fc <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3740      	adds	r7, #64	@ 0x40
 80035c4:	46bd      	mov	sp, r7
 80035c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	017d7840 	.word	0x017d7840

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000010 	.word	0x20000010

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	@ (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08004858 	.word	0x08004858

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	@ (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08004858 	.word	0x08004858

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e042      	b.n	80036d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd ffae 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f973 	bl	8003970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d175      	bne.n	80037ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Transmit+0x2c>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e06e      	b.n	80037ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2221      	movs	r2, #33	@ 0x21
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371e:	f7fe f8a3 	bl	8001868 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	d108      	bne.n	800374c <HAL_UART_Transmit+0x6c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e003      	b.n	8003754 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003754:	e02e      	b.n	80037b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f848 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03a      	b.n	80037ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800378c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3302      	adds	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e007      	b.n	80037a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1cb      	bne.n	8003756 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2140      	movs	r1, #64	@ 0x40
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f814 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e03b      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d037      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003810:	f7fe f82a 	bl	8001868 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d302      	bcc.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e03a      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d020      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d01d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d116      	bne.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f81d 	bl	80038a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2208      	movs	r2, #8
 8003872:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e00f      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	429a      	cmp	r2, r3
 800389c:	d0b4      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b095      	sub	sp, #84	@ 0x54
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80038d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e5      	bne.n	80038b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3314      	adds	r3, #20
 80038ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3314      	adds	r3, #20
 8003902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	d119      	bne.n	8003954 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	647b      	str	r3, [r7, #68]	@ 0x44
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003940:	61ba      	str	r2, [r7, #24]
 8003942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	613b      	str	r3, [r7, #16]
   return(result);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e5      	bne.n	8003920 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003962:	bf00      	nop
 8003964:	3754      	adds	r7, #84	@ 0x54
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b0c0      	sub	sp, #256	@ 0x100
 8003976:	af00      	add	r7, sp, #0
 8003978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	68d9      	ldr	r1, [r3, #12]
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	ea40 0301 	orr.w	r3, r0, r1
 8003998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039c8:	f021 010c 	bic.w	r1, r1, #12
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	6999      	ldr	r1, [r3, #24]
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	ea40 0301 	orr.w	r3, r0, r1
 80039f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b8f      	ldr	r3, [pc, #572]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d005      	beq.n	8003a10 <UART_SetConfig+0xa0>
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003c40 <UART_SetConfig+0x2d0>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d104      	bne.n	8003a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7ff fe02 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8003a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a18:	e003      	b.n	8003a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a1a:	f7ff fde9 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8003a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a2c:	f040 810c 	bne.w	8003c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a52:	4621      	mov	r1, r4
 8003a54:	eb12 0801 	adds.w	r8, r2, r1
 8003a58:	4629      	mov	r1, r5
 8003a5a:	eb43 0901 	adc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a80:	462b      	mov	r3, r5
 8003a82:	eb49 0303 	adc.w	r3, r9, r3
 8003a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	18db      	adds	r3, r3, r3
 8003aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	eb42 0303 	adc.w	r3, r2, r3
 8003aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ab4:	f7fc ff22 	bl	80008fc <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003abe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	011c      	lsls	r4, r3, #4
 8003ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ae8:	4641      	mov	r1, r8
 8003aea:	eb12 0a01 	adds.w	sl, r2, r1
 8003aee:	4649      	mov	r1, r9
 8003af0:	eb43 0b01 	adc.w	fp, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b08:	4692      	mov	sl, r2
 8003b0a:	469b      	mov	fp, r3
 8003b0c:	4643      	mov	r3, r8
 8003b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b16:	464b      	mov	r3, r9
 8003b18:	eb4b 0303 	adc.w	r3, fp, r3
 8003b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b34:	460b      	mov	r3, r1
 8003b36:	18db      	adds	r3, r3, r3
 8003b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b4a:	f7fc fed7 	bl	80008fc <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	@ 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b6a:	4b36      	ldr	r3, [pc, #216]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b78:	441c      	add	r4, r3
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b94:	415b      	adcs	r3, r3
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	1851      	adds	r1, r2, r1
 8003ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	414b      	adcs	r3, r1
 8003ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bb4:	4659      	mov	r1, fp
 8003bb6:	00cb      	lsls	r3, r1, #3
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	00ca      	lsls	r2, r1, #3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4642      	mov	r2, r8
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	460a      	mov	r2, r1
 8003bd4:	eb42 0303 	adc.w	r3, r2, r3
 8003bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	18db      	adds	r3, r3, r3
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	eb42 0303 	adc.w	r3, r2, r3
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c06:	f7fc fe79 	bl	80008fc <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	@ 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	3332      	adds	r3, #50	@ 0x32
 8003c22:	4a08      	ldr	r2, [pc, #32]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 0207 	and.w	r2, r3, #7
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4422      	add	r2, r4
 8003c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c38:	e106      	b.n	8003e48 <UART_SetConfig+0x4d8>
 8003c3a:	bf00      	nop
 8003c3c:	40011000 	.word	0x40011000
 8003c40:	40011400 	.word	0x40011400
 8003c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	1891      	adds	r1, r2, r2
 8003c60:	6239      	str	r1, [r7, #32]
 8003c62:	415b      	adcs	r3, r3
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	1854      	adds	r4, r2, r1
 8003c6e:	4649      	mov	r1, r9
 8003c70:	eb43 0501 	adc.w	r5, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	00eb      	lsls	r3, r5, #3
 8003c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c82:	00e2      	lsls	r2, r4, #3
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	4643      	mov	r3, r8
 8003c8a:	18e3      	adds	r3, r4, r3
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c90:	464b      	mov	r3, r9
 8003c92:	eb45 0303 	adc.w	r3, r5, r3
 8003c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	008b      	lsls	r3, r1, #2
 8003cba:	4621      	mov	r1, r4
 8003cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	008a      	lsls	r2, r1, #2
 8003cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cc8:	f7fc fe18 	bl	80008fc <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4b60      	ldr	r3, [pc, #384]	@ (8003e54 <UART_SetConfig+0x4e4>)
 8003cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	011c      	lsls	r4, r3, #4
 8003cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	1891      	adds	r1, r2, r2
 8003cf2:	61b9      	str	r1, [r7, #24]
 8003cf4:	415b      	adcs	r3, r3
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	1851      	adds	r1, r2, r1
 8003d00:	6139      	str	r1, [r7, #16]
 8003d02:	4649      	mov	r1, r9
 8003d04:	414b      	adcs	r3, r1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d14:	4659      	mov	r1, fp
 8003d16:	00cb      	lsls	r3, r1, #3
 8003d18:	4651      	mov	r1, sl
 8003d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1e:	4651      	mov	r1, sl
 8003d20:	00ca      	lsls	r2, r1, #3
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	4642      	mov	r2, r8
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d30:	464b      	mov	r3, r9
 8003d32:	460a      	mov	r2, r1
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d54:	4649      	mov	r1, r9
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	4641      	mov	r1, r8
 8003d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5e:	4641      	mov	r1, r8
 8003d60:	008a      	lsls	r2, r1, #2
 8003d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d66:	f7fc fdc9 	bl	80008fc <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4b38      	ldr	r3, [pc, #224]	@ (8003e54 <UART_SetConfig+0x4e4>)
 8003d72:	fba3 2301 	umull	r2, r3, r3, r1
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2264      	movs	r2, #100	@ 0x64
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	1acb      	subs	r3, r1, r3
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	3332      	adds	r3, #50	@ 0x32
 8003d84:	4a33      	ldr	r2, [pc, #204]	@ (8003e54 <UART_SetConfig+0x4e4>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d90:	441c      	add	r4, r3
 8003d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d96:	2200      	movs	r2, #0
 8003d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003da0:	4642      	mov	r2, r8
 8003da2:	464b      	mov	r3, r9
 8003da4:	1891      	adds	r1, r2, r2
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	415b      	adcs	r3, r3
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db0:	4641      	mov	r1, r8
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	4649      	mov	r1, r9
 8003db8:	414b      	adcs	r3, r1
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	00cb      	lsls	r3, r1, #3
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4642      	mov	r2, r8
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003de2:	464b      	mov	r3, r9
 8003de4:	460a      	mov	r2, r1
 8003de6:	eb42 0303 	adc.w	r3, r2, r3
 8003dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e04:	4649      	mov	r1, r9
 8003e06:	008b      	lsls	r3, r1, #2
 8003e08:	4641      	mov	r1, r8
 8003e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0e:	4641      	mov	r1, r8
 8003e10:	008a      	lsls	r2, r1, #2
 8003e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e16:	f7fc fd71 	bl	80008fc <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <UART_SetConfig+0x4e4>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	@ 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	3332      	adds	r3, #50	@ 0x32
 8003e32:	4a08      	ldr	r2, [pc, #32]	@ (8003e54 <UART_SetConfig+0x4e4>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4422      	add	r2, r4
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e54:	51eb851f 	.word	0x51eb851f

08003e58 <siprintf>:
 8003e58:	b40e      	push	{r1, r2, r3}
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	b09d      	sub	sp, #116	@ 0x74
 8003e5e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e60:	9002      	str	r0, [sp, #8]
 8003e62:	9006      	str	r0, [sp, #24]
 8003e64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e68:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <siprintf+0x3c>)
 8003e6a:	9107      	str	r1, [sp, #28]
 8003e6c:	9104      	str	r1, [sp, #16]
 8003e6e:	490a      	ldr	r1, [pc, #40]	@ (8003e98 <siprintf+0x40>)
 8003e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e74:	9105      	str	r1, [sp, #20]
 8003e76:	2400      	movs	r4, #0
 8003e78:	a902      	add	r1, sp, #8
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e80:	f000 f994 	bl	80041ac <_svfiprintf_r>
 8003e84:	9b02      	ldr	r3, [sp, #8]
 8003e86:	701c      	strb	r4, [r3, #0]
 8003e88:	b01d      	add	sp, #116	@ 0x74
 8003e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e8e:	b003      	add	sp, #12
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000001c 	.word	0x2000001c
 8003e98:	ffff0208 	.word	0xffff0208

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <__errno>:
 8003eac:	4b01      	ldr	r3, [pc, #4]	@ (8003eb4 <__errno+0x8>)
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	2000001c 	.word	0x2000001c

08003eb8 <__libc_init_array>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef0 <__libc_init_array+0x38>)
 8003ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef4 <__libc_init_array+0x3c>)
 8003ebe:	1b64      	subs	r4, r4, r5
 8003ec0:	10a4      	asrs	r4, r4, #2
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	42a6      	cmp	r6, r4
 8003ec6:	d109      	bne.n	8003edc <__libc_init_array+0x24>
 8003ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef8 <__libc_init_array+0x40>)
 8003eca:	4c0c      	ldr	r4, [pc, #48]	@ (8003efc <__libc_init_array+0x44>)
 8003ecc:	f000 fc64 	bl	8004798 <_init>
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	42a6      	cmp	r6, r4
 8003ed8:	d105      	bne.n	8003ee6 <__libc_init_array+0x2e>
 8003eda:	bd70      	pop	{r4, r5, r6, pc}
 8003edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee0:	4798      	blx	r3
 8003ee2:	3601      	adds	r6, #1
 8003ee4:	e7ee      	b.n	8003ec4 <__libc_init_array+0xc>
 8003ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eea:	4798      	blx	r3
 8003eec:	3601      	adds	r6, #1
 8003eee:	e7f2      	b.n	8003ed6 <__libc_init_array+0x1e>
 8003ef0:	0800489c 	.word	0x0800489c
 8003ef4:	0800489c 	.word	0x0800489c
 8003ef8:	0800489c 	.word	0x0800489c
 8003efc:	080048a0 	.word	0x080048a0

08003f00 <__retarget_lock_acquire_recursive>:
 8003f00:	4770      	bx	lr

08003f02 <__retarget_lock_release_recursive>:
 8003f02:	4770      	bx	lr

08003f04 <_free_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4605      	mov	r5, r0
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	d041      	beq.n	8003f90 <_free_r+0x8c>
 8003f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f10:	1f0c      	subs	r4, r1, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bfb8      	it	lt
 8003f16:	18e4      	addlt	r4, r4, r3
 8003f18:	f000 f8e0 	bl	80040dc <__malloc_lock>
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <_free_r+0x90>)
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	b933      	cbnz	r3, 8003f30 <_free_r+0x2c>
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	6014      	str	r4, [r2, #0]
 8003f26:	4628      	mov	r0, r5
 8003f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f2c:	f000 b8dc 	b.w	80040e8 <__malloc_unlock>
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	d908      	bls.n	8003f46 <_free_r+0x42>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	1821      	adds	r1, r4, r0
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf01      	itttt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	1809      	addeq	r1, r1, r0
 8003f42:	6021      	streq	r1, [r4, #0]
 8003f44:	e7ed      	b.n	8003f22 <_free_r+0x1e>
 8003f46:	461a      	mov	r2, r3
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b10b      	cbz	r3, 8003f50 <_free_r+0x4c>
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d9fa      	bls.n	8003f46 <_free_r+0x42>
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	1850      	adds	r0, r2, r1
 8003f54:	42a0      	cmp	r0, r4
 8003f56:	d10b      	bne.n	8003f70 <_free_r+0x6c>
 8003f58:	6820      	ldr	r0, [r4, #0]
 8003f5a:	4401      	add	r1, r0
 8003f5c:	1850      	adds	r0, r2, r1
 8003f5e:	4283      	cmp	r3, r0
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	d1e0      	bne.n	8003f26 <_free_r+0x22>
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6053      	str	r3, [r2, #4]
 8003f6a:	4408      	add	r0, r1
 8003f6c:	6010      	str	r0, [r2, #0]
 8003f6e:	e7da      	b.n	8003f26 <_free_r+0x22>
 8003f70:	d902      	bls.n	8003f78 <_free_r+0x74>
 8003f72:	230c      	movs	r3, #12
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	e7d6      	b.n	8003f26 <_free_r+0x22>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	1821      	adds	r1, r4, r0
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	bf04      	itt	eq
 8003f80:	6819      	ldreq	r1, [r3, #0]
 8003f82:	685b      	ldreq	r3, [r3, #4]
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	bf04      	itt	eq
 8003f88:	1809      	addeq	r1, r1, r0
 8003f8a:	6021      	streq	r1, [r4, #0]
 8003f8c:	6054      	str	r4, [r2, #4]
 8003f8e:	e7ca      	b.n	8003f26 <_free_r+0x22>
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	bf00      	nop
 8003f94:	200002cc 	.word	0x200002cc

08003f98 <sbrk_aligned>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd8 <sbrk_aligned+0x40>)
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	6831      	ldr	r1, [r6, #0]
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	b911      	cbnz	r1, 8003faa <sbrk_aligned+0x12>
 8003fa4:	f000 fba4 	bl	80046f0 <_sbrk_r>
 8003fa8:	6030      	str	r0, [r6, #0]
 8003faa:	4621      	mov	r1, r4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 fb9f 	bl	80046f0 <_sbrk_r>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d103      	bne.n	8003fbe <sbrk_aligned+0x26>
 8003fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8003fba:	4620      	mov	r0, r4
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	1cc4      	adds	r4, r0, #3
 8003fc0:	f024 0403 	bic.w	r4, r4, #3
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d0f8      	beq.n	8003fba <sbrk_aligned+0x22>
 8003fc8:	1a21      	subs	r1, r4, r0
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fb90 	bl	80046f0 <_sbrk_r>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d1f2      	bne.n	8003fba <sbrk_aligned+0x22>
 8003fd4:	e7ef      	b.n	8003fb6 <sbrk_aligned+0x1e>
 8003fd6:	bf00      	nop
 8003fd8:	200002c8 	.word	0x200002c8

08003fdc <_malloc_r>:
 8003fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe0:	1ccd      	adds	r5, r1, #3
 8003fe2:	f025 0503 	bic.w	r5, r5, #3
 8003fe6:	3508      	adds	r5, #8
 8003fe8:	2d0c      	cmp	r5, #12
 8003fea:	bf38      	it	cc
 8003fec:	250c      	movcc	r5, #12
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	db01      	blt.n	8003ff8 <_malloc_r+0x1c>
 8003ff4:	42a9      	cmp	r1, r5
 8003ff6:	d904      	bls.n	8004002 <_malloc_r+0x26>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d8 <_malloc_r+0xfc>
 8004006:	f000 f869 	bl	80040dc <__malloc_lock>
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	461c      	mov	r4, r3
 8004010:	bb44      	cbnz	r4, 8004064 <_malloc_r+0x88>
 8004012:	4629      	mov	r1, r5
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffbf 	bl	8003f98 <sbrk_aligned>
 800401a:	1c43      	adds	r3, r0, #1
 800401c:	4604      	mov	r4, r0
 800401e:	d158      	bne.n	80040d2 <_malloc_r+0xf6>
 8004020:	f8d8 4000 	ldr.w	r4, [r8]
 8004024:	4627      	mov	r7, r4
 8004026:	2f00      	cmp	r7, #0
 8004028:	d143      	bne.n	80040b2 <_malloc_r+0xd6>
 800402a:	2c00      	cmp	r4, #0
 800402c:	d04b      	beq.n	80040c6 <_malloc_r+0xea>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	4639      	mov	r1, r7
 8004032:	4630      	mov	r0, r6
 8004034:	eb04 0903 	add.w	r9, r4, r3
 8004038:	f000 fb5a 	bl	80046f0 <_sbrk_r>
 800403c:	4581      	cmp	r9, r0
 800403e:	d142      	bne.n	80040c6 <_malloc_r+0xea>
 8004040:	6821      	ldr	r1, [r4, #0]
 8004042:	1a6d      	subs	r5, r5, r1
 8004044:	4629      	mov	r1, r5
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff ffa6 	bl	8003f98 <sbrk_aligned>
 800404c:	3001      	adds	r0, #1
 800404e:	d03a      	beq.n	80040c6 <_malloc_r+0xea>
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	442b      	add	r3, r5
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	f8d8 3000 	ldr.w	r3, [r8]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	bb62      	cbnz	r2, 80040b8 <_malloc_r+0xdc>
 800405e:	f8c8 7000 	str.w	r7, [r8]
 8004062:	e00f      	b.n	8004084 <_malloc_r+0xa8>
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	1b52      	subs	r2, r2, r5
 8004068:	d420      	bmi.n	80040ac <_malloc_r+0xd0>
 800406a:	2a0b      	cmp	r2, #11
 800406c:	d917      	bls.n	800409e <_malloc_r+0xc2>
 800406e:	1961      	adds	r1, r4, r5
 8004070:	42a3      	cmp	r3, r4
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	6059      	strne	r1, [r3, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	bf08      	it	eq
 800407c:	f8c8 1000 	streq.w	r1, [r8]
 8004080:	5162      	str	r2, [r4, r5]
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	4630      	mov	r0, r6
 8004086:	f000 f82f 	bl	80040e8 <__malloc_unlock>
 800408a:	f104 000b 	add.w	r0, r4, #11
 800408e:	1d23      	adds	r3, r4, #4
 8004090:	f020 0007 	bic.w	r0, r0, #7
 8004094:	1ac2      	subs	r2, r0, r3
 8004096:	bf1c      	itt	ne
 8004098:	1a1b      	subne	r3, r3, r0
 800409a:	50a3      	strne	r3, [r4, r2]
 800409c:	e7af      	b.n	8003ffe <_malloc_r+0x22>
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	bf0c      	ite	eq
 80040a4:	f8c8 2000 	streq.w	r2, [r8]
 80040a8:	605a      	strne	r2, [r3, #4]
 80040aa:	e7eb      	b.n	8004084 <_malloc_r+0xa8>
 80040ac:	4623      	mov	r3, r4
 80040ae:	6864      	ldr	r4, [r4, #4]
 80040b0:	e7ae      	b.n	8004010 <_malloc_r+0x34>
 80040b2:	463c      	mov	r4, r7
 80040b4:	687f      	ldr	r7, [r7, #4]
 80040b6:	e7b6      	b.n	8004026 <_malloc_r+0x4a>
 80040b8:	461a      	mov	r2, r3
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d1fb      	bne.n	80040b8 <_malloc_r+0xdc>
 80040c0:	2300      	movs	r3, #0
 80040c2:	6053      	str	r3, [r2, #4]
 80040c4:	e7de      	b.n	8004084 <_malloc_r+0xa8>
 80040c6:	230c      	movs	r3, #12
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f80c 	bl	80040e8 <__malloc_unlock>
 80040d0:	e794      	b.n	8003ffc <_malloc_r+0x20>
 80040d2:	6005      	str	r5, [r0, #0]
 80040d4:	e7d6      	b.n	8004084 <_malloc_r+0xa8>
 80040d6:	bf00      	nop
 80040d8:	200002cc 	.word	0x200002cc

080040dc <__malloc_lock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	@ (80040e4 <__malloc_lock+0x8>)
 80040de:	f7ff bf0f 	b.w	8003f00 <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	200002c4 	.word	0x200002c4

080040e8 <__malloc_unlock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	@ (80040f0 <__malloc_unlock+0x8>)
 80040ea:	f7ff bf0a 	b.w	8003f02 <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	200002c4 	.word	0x200002c4

080040f4 <__ssputs_r>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	688e      	ldr	r6, [r1, #8]
 80040fa:	461f      	mov	r7, r3
 80040fc:	42be      	cmp	r6, r7
 80040fe:	680b      	ldr	r3, [r1, #0]
 8004100:	4682      	mov	sl, r0
 8004102:	460c      	mov	r4, r1
 8004104:	4690      	mov	r8, r2
 8004106:	d82d      	bhi.n	8004164 <__ssputs_r+0x70>
 8004108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800410c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004110:	d026      	beq.n	8004160 <__ssputs_r+0x6c>
 8004112:	6965      	ldr	r5, [r4, #20]
 8004114:	6909      	ldr	r1, [r1, #16]
 8004116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800411a:	eba3 0901 	sub.w	r9, r3, r1
 800411e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004122:	1c7b      	adds	r3, r7, #1
 8004124:	444b      	add	r3, r9
 8004126:	106d      	asrs	r5, r5, #1
 8004128:	429d      	cmp	r5, r3
 800412a:	bf38      	it	cc
 800412c:	461d      	movcc	r5, r3
 800412e:	0553      	lsls	r3, r2, #21
 8004130:	d527      	bpl.n	8004182 <__ssputs_r+0x8e>
 8004132:	4629      	mov	r1, r5
 8004134:	f7ff ff52 	bl	8003fdc <_malloc_r>
 8004138:	4606      	mov	r6, r0
 800413a:	b360      	cbz	r0, 8004196 <__ssputs_r+0xa2>
 800413c:	6921      	ldr	r1, [r4, #16]
 800413e:	464a      	mov	r2, r9
 8004140:	f000 fae6 	bl	8004710 <memcpy>
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800414a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	6126      	str	r6, [r4, #16]
 8004152:	6165      	str	r5, [r4, #20]
 8004154:	444e      	add	r6, r9
 8004156:	eba5 0509 	sub.w	r5, r5, r9
 800415a:	6026      	str	r6, [r4, #0]
 800415c:	60a5      	str	r5, [r4, #8]
 800415e:	463e      	mov	r6, r7
 8004160:	42be      	cmp	r6, r7
 8004162:	d900      	bls.n	8004166 <__ssputs_r+0x72>
 8004164:	463e      	mov	r6, r7
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	4632      	mov	r2, r6
 800416a:	4641      	mov	r1, r8
 800416c:	f000 faa6 	bl	80046bc <memmove>
 8004170:	68a3      	ldr	r3, [r4, #8]
 8004172:	1b9b      	subs	r3, r3, r6
 8004174:	60a3      	str	r3, [r4, #8]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	4433      	add	r3, r6
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	2000      	movs	r0, #0
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	462a      	mov	r2, r5
 8004184:	f000 fad2 	bl	800472c <_realloc_r>
 8004188:	4606      	mov	r6, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d1e0      	bne.n	8004150 <__ssputs_r+0x5c>
 800418e:	6921      	ldr	r1, [r4, #16]
 8004190:	4650      	mov	r0, sl
 8004192:	f7ff feb7 	bl	8003f04 <_free_r>
 8004196:	230c      	movs	r3, #12
 8004198:	f8ca 3000 	str.w	r3, [sl]
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e7e9      	b.n	800417e <__ssputs_r+0x8a>
	...

080041ac <_svfiprintf_r>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	4698      	mov	r8, r3
 80041b2:	898b      	ldrh	r3, [r1, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	b09d      	sub	sp, #116	@ 0x74
 80041b8:	4607      	mov	r7, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	d510      	bpl.n	80041e2 <_svfiprintf_r+0x36>
 80041c0:	690b      	ldr	r3, [r1, #16]
 80041c2:	b973      	cbnz	r3, 80041e2 <_svfiprintf_r+0x36>
 80041c4:	2140      	movs	r1, #64	@ 0x40
 80041c6:	f7ff ff09 	bl	8003fdc <_malloc_r>
 80041ca:	6028      	str	r0, [r5, #0]
 80041cc:	6128      	str	r0, [r5, #16]
 80041ce:	b930      	cbnz	r0, 80041de <_svfiprintf_r+0x32>
 80041d0:	230c      	movs	r3, #12
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b01d      	add	sp, #116	@ 0x74
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	616b      	str	r3, [r5, #20]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e6:	2320      	movs	r3, #32
 80041e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80041f0:	2330      	movs	r3, #48	@ 0x30
 80041f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004390 <_svfiprintf_r+0x1e4>
 80041f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041fa:	f04f 0901 	mov.w	r9, #1
 80041fe:	4623      	mov	r3, r4
 8004200:	469a      	mov	sl, r3
 8004202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004206:	b10a      	cbz	r2, 800420c <_svfiprintf_r+0x60>
 8004208:	2a25      	cmp	r2, #37	@ 0x25
 800420a:	d1f9      	bne.n	8004200 <_svfiprintf_r+0x54>
 800420c:	ebba 0b04 	subs.w	fp, sl, r4
 8004210:	d00b      	beq.n	800422a <_svfiprintf_r+0x7e>
 8004212:	465b      	mov	r3, fp
 8004214:	4622      	mov	r2, r4
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff ff6b 	bl	80040f4 <__ssputs_r>
 800421e:	3001      	adds	r0, #1
 8004220:	f000 80a7 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004226:	445a      	add	r2, fp
 8004228:	9209      	str	r2, [sp, #36]	@ 0x24
 800422a:	f89a 3000 	ldrb.w	r3, [sl]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 809f 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004234:	2300      	movs	r3, #0
 8004236:	f04f 32ff 	mov.w	r2, #4294967295
 800423a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423e:	f10a 0a01 	add.w	sl, sl, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	9307      	str	r3, [sp, #28]
 8004246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800424a:	931a      	str	r3, [sp, #104]	@ 0x68
 800424c:	4654      	mov	r4, sl
 800424e:	2205      	movs	r2, #5
 8004250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004254:	484e      	ldr	r0, [pc, #312]	@ (8004390 <_svfiprintf_r+0x1e4>)
 8004256:	f7fb ffcb 	bl	80001f0 <memchr>
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	b9d8      	cbnz	r0, 8004296 <_svfiprintf_r+0xea>
 800425e:	06d0      	lsls	r0, r2, #27
 8004260:	bf44      	itt	mi
 8004262:	2320      	movmi	r3, #32
 8004264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004268:	0711      	lsls	r1, r2, #28
 800426a:	bf44      	itt	mi
 800426c:	232b      	movmi	r3, #43	@ 0x2b
 800426e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b2a      	cmp	r3, #42	@ 0x2a
 8004278:	d015      	beq.n	80042a6 <_svfiprintf_r+0xfa>
 800427a:	9a07      	ldr	r2, [sp, #28]
 800427c:	4654      	mov	r4, sl
 800427e:	2000      	movs	r0, #0
 8004280:	f04f 0c0a 	mov.w	ip, #10
 8004284:	4621      	mov	r1, r4
 8004286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800428a:	3b30      	subs	r3, #48	@ 0x30
 800428c:	2b09      	cmp	r3, #9
 800428e:	d94b      	bls.n	8004328 <_svfiprintf_r+0x17c>
 8004290:	b1b0      	cbz	r0, 80042c0 <_svfiprintf_r+0x114>
 8004292:	9207      	str	r2, [sp, #28]
 8004294:	e014      	b.n	80042c0 <_svfiprintf_r+0x114>
 8004296:	eba0 0308 	sub.w	r3, r0, r8
 800429a:	fa09 f303 	lsl.w	r3, r9, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	46a2      	mov	sl, r4
 80042a4:	e7d2      	b.n	800424c <_svfiprintf_r+0xa0>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d19      	adds	r1, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9103      	str	r1, [sp, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfbb      	ittet	lt
 80042b2:	425b      	neglt	r3, r3
 80042b4:	f042 0202 	orrlt.w	r2, r2, #2
 80042b8:	9307      	strge	r3, [sp, #28]
 80042ba:	9307      	strlt	r3, [sp, #28]
 80042bc:	bfb8      	it	lt
 80042be:	9204      	strlt	r2, [sp, #16]
 80042c0:	7823      	ldrb	r3, [r4, #0]
 80042c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80042c4:	d10a      	bne.n	80042dc <_svfiprintf_r+0x130>
 80042c6:	7863      	ldrb	r3, [r4, #1]
 80042c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ca:	d132      	bne.n	8004332 <_svfiprintf_r+0x186>
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	9203      	str	r2, [sp, #12]
 80042d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042d8:	3402      	adds	r4, #2
 80042da:	9305      	str	r3, [sp, #20]
 80042dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80043a0 <_svfiprintf_r+0x1f4>
 80042e0:	7821      	ldrb	r1, [r4, #0]
 80042e2:	2203      	movs	r2, #3
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7fb ff83 	bl	80001f0 <memchr>
 80042ea:	b138      	cbz	r0, 80042fc <_svfiprintf_r+0x150>
 80042ec:	9b04      	ldr	r3, [sp, #16]
 80042ee:	eba0 000a 	sub.w	r0, r0, sl
 80042f2:	2240      	movs	r2, #64	@ 0x40
 80042f4:	4082      	lsls	r2, r0
 80042f6:	4313      	orrs	r3, r2
 80042f8:	3401      	adds	r4, #1
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4824      	ldr	r0, [pc, #144]	@ (8004394 <_svfiprintf_r+0x1e8>)
 8004302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004306:	2206      	movs	r2, #6
 8004308:	f7fb ff72 	bl	80001f0 <memchr>
 800430c:	2800      	cmp	r0, #0
 800430e:	d036      	beq.n	800437e <_svfiprintf_r+0x1d2>
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <_svfiprintf_r+0x1ec>)
 8004312:	bb1b      	cbnz	r3, 800435c <_svfiprintf_r+0x1b0>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3307      	adds	r3, #7
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004322:	4433      	add	r3, r6
 8004324:	9309      	str	r3, [sp, #36]	@ 0x24
 8004326:	e76a      	b.n	80041fe <_svfiprintf_r+0x52>
 8004328:	fb0c 3202 	mla	r2, ip, r2, r3
 800432c:	460c      	mov	r4, r1
 800432e:	2001      	movs	r0, #1
 8004330:	e7a8      	b.n	8004284 <_svfiprintf_r+0xd8>
 8004332:	2300      	movs	r3, #0
 8004334:	3401      	adds	r4, #1
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	4619      	mov	r1, r3
 800433a:	f04f 0c0a 	mov.w	ip, #10
 800433e:	4620      	mov	r0, r4
 8004340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004344:	3a30      	subs	r2, #48	@ 0x30
 8004346:	2a09      	cmp	r2, #9
 8004348:	d903      	bls.n	8004352 <_svfiprintf_r+0x1a6>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c6      	beq.n	80042dc <_svfiprintf_r+0x130>
 800434e:	9105      	str	r1, [sp, #20]
 8004350:	e7c4      	b.n	80042dc <_svfiprintf_r+0x130>
 8004352:	fb0c 2101 	mla	r1, ip, r1, r2
 8004356:	4604      	mov	r4, r0
 8004358:	2301      	movs	r3, #1
 800435a:	e7f0      	b.n	800433e <_svfiprintf_r+0x192>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462a      	mov	r2, r5
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <_svfiprintf_r+0x1f0>)
 8004364:	a904      	add	r1, sp, #16
 8004366:	4638      	mov	r0, r7
 8004368:	f3af 8000 	nop.w
 800436c:	1c42      	adds	r2, r0, #1
 800436e:	4606      	mov	r6, r0
 8004370:	d1d6      	bne.n	8004320 <_svfiprintf_r+0x174>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	065b      	lsls	r3, r3, #25
 8004376:	f53f af2d 	bmi.w	80041d4 <_svfiprintf_r+0x28>
 800437a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800437c:	e72c      	b.n	80041d8 <_svfiprintf_r+0x2c>
 800437e:	ab03      	add	r3, sp, #12
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	462a      	mov	r2, r5
 8004384:	4b05      	ldr	r3, [pc, #20]	@ (800439c <_svfiprintf_r+0x1f0>)
 8004386:	a904      	add	r1, sp, #16
 8004388:	4638      	mov	r0, r7
 800438a:	f000 f879 	bl	8004480 <_printf_i>
 800438e:	e7ed      	b.n	800436c <_svfiprintf_r+0x1c0>
 8004390:	08004860 	.word	0x08004860
 8004394:	0800486a 	.word	0x0800486a
 8004398:	00000000 	.word	0x00000000
 800439c:	080040f5 	.word	0x080040f5
 80043a0:	08004866 	.word	0x08004866

080043a4 <_printf_common>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	4698      	mov	r8, r3
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bfb8      	it	lt
 80043b8:	4613      	movlt	r3, r2
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043c0:	4607      	mov	r7, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b10a      	cbz	r2, 80043ca <_printf_common+0x26>
 80043c6:	3301      	adds	r3, #1
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	6833      	ldrmi	r3, [r6, #0]
 80043d2:	3302      	addmi	r3, #2
 80043d4:	6033      	strmi	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	f015 0506 	ands.w	r5, r5, #6
 80043dc:	d106      	bne.n	80043ec <_printf_common+0x48>
 80043de:	f104 0a19 	add.w	sl, r4, #25
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	6832      	ldr	r2, [r6, #0]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc26      	bgt.n	800443a <_printf_common+0x96>
 80043ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	3b00      	subs	r3, #0
 80043f4:	bf18      	it	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	0692      	lsls	r2, r2, #26
 80043fa:	d42b      	bmi.n	8004454 <_printf_common+0xb0>
 80043fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004400:	4641      	mov	r1, r8
 8004402:	4638      	mov	r0, r7
 8004404:	47c8      	blx	r9
 8004406:	3001      	adds	r0, #1
 8004408:	d01e      	beq.n	8004448 <_printf_common+0xa4>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	f003 0306 	and.w	r3, r3, #6
 8004412:	2b04      	cmp	r3, #4
 8004414:	bf02      	ittt	eq
 8004416:	68e5      	ldreq	r5, [r4, #12]
 8004418:	6833      	ldreq	r3, [r6, #0]
 800441a:	1aed      	subeq	r5, r5, r3
 800441c:	68a3      	ldr	r3, [r4, #8]
 800441e:	bf0c      	ite	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	2500      	movne	r5, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	bfc4      	itt	gt
 800442a:	1a9b      	subgt	r3, r3, r2
 800442c:	18ed      	addgt	r5, r5, r3
 800442e:	2600      	movs	r6, #0
 8004430:	341a      	adds	r4, #26
 8004432:	42b5      	cmp	r5, r6
 8004434:	d11a      	bne.n	800446c <_printf_common+0xc8>
 8004436:	2000      	movs	r0, #0
 8004438:	e008      	b.n	800444c <_printf_common+0xa8>
 800443a:	2301      	movs	r3, #1
 800443c:	4652      	mov	r2, sl
 800443e:	4641      	mov	r1, r8
 8004440:	4638      	mov	r0, r7
 8004442:	47c8      	blx	r9
 8004444:	3001      	adds	r0, #1
 8004446:	d103      	bne.n	8004450 <_printf_common+0xac>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	3501      	adds	r5, #1
 8004452:	e7c6      	b.n	80043e2 <_printf_common+0x3e>
 8004454:	18e1      	adds	r1, r4, r3
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	2030      	movs	r0, #48	@ 0x30
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800445e:	4422      	add	r2, r4
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004468:	3302      	adds	r3, #2
 800446a:	e7c7      	b.n	80043fc <_printf_common+0x58>
 800446c:	2301      	movs	r3, #1
 800446e:	4622      	mov	r2, r4
 8004470:	4641      	mov	r1, r8
 8004472:	4638      	mov	r0, r7
 8004474:	47c8      	blx	r9
 8004476:	3001      	adds	r0, #1
 8004478:	d0e6      	beq.n	8004448 <_printf_common+0xa4>
 800447a:	3601      	adds	r6, #1
 800447c:	e7d9      	b.n	8004432 <_printf_common+0x8e>
	...

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	7e0f      	ldrb	r7, [r1, #24]
 8004486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004488:	2f78      	cmp	r7, #120	@ 0x78
 800448a:	4691      	mov	r9, r2
 800448c:	4680      	mov	r8, r0
 800448e:	460c      	mov	r4, r1
 8004490:	469a      	mov	sl, r3
 8004492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	@ 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d1 	beq.w	8004644 <_printf_i+0x1c4>
 80044a2:	2f58      	cmp	r7, #88	@ 0x58
 80044a4:	f000 80b8 	beq.w	8004618 <_printf_i+0x198>
 80044a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a101      	add	r1, pc, #4	@ (adr r1, 80044c0 <_printf_i+0x40>)
 80044bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	0800462b 	.word	0x0800462b
 80044f0:	08004557 	.word	0x08004557
 80044f4:	080045e5 	.word	0x080045e5
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	0800464d 	.word	0x0800464d
 8004504:	080044a9 	.word	0x080044a9
 8004508:	08004557 	.word	0x08004557
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	080045ed 	.word	0x080045ed
 8004518:	6833      	ldr	r3, [r6, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6032      	str	r2, [r6, #0]
 8004520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e09c      	b.n	8004666 <_printf_i+0x1e6>
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6031      	str	r1, [r6, #0]
 8004534:	0606      	lsls	r6, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xbc>
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	e003      	b.n	8004544 <_printf_i+0xc4>
 800453c:	0645      	lsls	r5, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xb8>
 8004540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004544:	2d00      	cmp	r5, #0
 8004546:	da03      	bge.n	8004550 <_printf_i+0xd0>
 8004548:	232d      	movs	r3, #45	@ 0x2d
 800454a:	426d      	negs	r5, r5
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004550:	4858      	ldr	r0, [pc, #352]	@ (80046b4 <_printf_i+0x234>)
 8004552:	230a      	movs	r3, #10
 8004554:	e011      	b.n	800457a <_printf_i+0xfa>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	0608      	lsls	r0, r1, #24
 800455c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004560:	d402      	bmi.n	8004568 <_printf_i+0xe8>
 8004562:	0649      	lsls	r1, r1, #25
 8004564:	bf48      	it	mi
 8004566:	b2ad      	uxthmi	r5, r5
 8004568:	2f6f      	cmp	r7, #111	@ 0x6f
 800456a:	4852      	ldr	r0, [pc, #328]	@ (80046b4 <_printf_i+0x234>)
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	bf14      	ite	ne
 8004570:	230a      	movne	r3, #10
 8004572:	2308      	moveq	r3, #8
 8004574:	2100      	movs	r1, #0
 8004576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800457a:	6866      	ldr	r6, [r4, #4]
 800457c:	60a6      	str	r6, [r4, #8]
 800457e:	2e00      	cmp	r6, #0
 8004580:	db05      	blt.n	800458e <_printf_i+0x10e>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	432e      	orrs	r6, r5
 8004586:	f021 0104 	bic.w	r1, r1, #4
 800458a:	6021      	str	r1, [r4, #0]
 800458c:	d04b      	beq.n	8004626 <_printf_i+0x1a6>
 800458e:	4616      	mov	r6, r2
 8004590:	fbb5 f1f3 	udiv	r1, r5, r3
 8004594:	fb03 5711 	mls	r7, r3, r1, r5
 8004598:	5dc7      	ldrb	r7, [r0, r7]
 800459a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800459e:	462f      	mov	r7, r5
 80045a0:	42bb      	cmp	r3, r7
 80045a2:	460d      	mov	r5, r1
 80045a4:	d9f4      	bls.n	8004590 <_printf_i+0x110>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d10b      	bne.n	80045c2 <_printf_i+0x142>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	07df      	lsls	r7, r3, #31
 80045ae:	d508      	bpl.n	80045c2 <_printf_i+0x142>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	6861      	ldr	r1, [r4, #4]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	bfde      	ittt	le
 80045b8:	2330      	movle	r3, #48	@ 0x30
 80045ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045c2:	1b92      	subs	r2, r2, r6
 80045c4:	6122      	str	r2, [r4, #16]
 80045c6:	f8cd a000 	str.w	sl, [sp]
 80045ca:	464b      	mov	r3, r9
 80045cc:	aa03      	add	r2, sp, #12
 80045ce:	4621      	mov	r1, r4
 80045d0:	4640      	mov	r0, r8
 80045d2:	f7ff fee7 	bl	80043a4 <_printf_common>
 80045d6:	3001      	adds	r0, #1
 80045d8:	d14a      	bne.n	8004670 <_printf_i+0x1f0>
 80045da:	f04f 30ff 	mov.w	r0, #4294967295
 80045de:	b004      	add	sp, #16
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	f043 0320 	orr.w	r3, r3, #32
 80045ea:	6023      	str	r3, [r4, #0]
 80045ec:	4832      	ldr	r0, [pc, #200]	@ (80046b8 <_printf_i+0x238>)
 80045ee:	2778      	movs	r7, #120	@ 0x78
 80045f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	6831      	ldr	r1, [r6, #0]
 80045f8:	061f      	lsls	r7, r3, #24
 80045fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80045fe:	d402      	bmi.n	8004606 <_printf_i+0x186>
 8004600:	065f      	lsls	r7, r3, #25
 8004602:	bf48      	it	mi
 8004604:	b2ad      	uxthmi	r5, r5
 8004606:	6031      	str	r1, [r6, #0]
 8004608:	07d9      	lsls	r1, r3, #31
 800460a:	bf44      	itt	mi
 800460c:	f043 0320 	orrmi.w	r3, r3, #32
 8004610:	6023      	strmi	r3, [r4, #0]
 8004612:	b11d      	cbz	r5, 800461c <_printf_i+0x19c>
 8004614:	2310      	movs	r3, #16
 8004616:	e7ad      	b.n	8004574 <_printf_i+0xf4>
 8004618:	4826      	ldr	r0, [pc, #152]	@ (80046b4 <_printf_i+0x234>)
 800461a:	e7e9      	b.n	80045f0 <_printf_i+0x170>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f023 0320 	bic.w	r3, r3, #32
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	e7f6      	b.n	8004614 <_printf_i+0x194>
 8004626:	4616      	mov	r6, r2
 8004628:	e7bd      	b.n	80045a6 <_printf_i+0x126>
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	6825      	ldr	r5, [r4, #0]
 800462e:	6961      	ldr	r1, [r4, #20]
 8004630:	1d18      	adds	r0, r3, #4
 8004632:	6030      	str	r0, [r6, #0]
 8004634:	062e      	lsls	r6, r5, #24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	d501      	bpl.n	800463e <_printf_i+0x1be>
 800463a:	6019      	str	r1, [r3, #0]
 800463c:	e002      	b.n	8004644 <_printf_i+0x1c4>
 800463e:	0668      	lsls	r0, r5, #25
 8004640:	d5fb      	bpl.n	800463a <_printf_i+0x1ba>
 8004642:	8019      	strh	r1, [r3, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	4616      	mov	r6, r2
 800464a:	e7bc      	b.n	80045c6 <_printf_i+0x146>
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	6032      	str	r2, [r6, #0]
 8004652:	681e      	ldr	r6, [r3, #0]
 8004654:	6862      	ldr	r2, [r4, #4]
 8004656:	2100      	movs	r1, #0
 8004658:	4630      	mov	r0, r6
 800465a:	f7fb fdc9 	bl	80001f0 <memchr>
 800465e:	b108      	cbz	r0, 8004664 <_printf_i+0x1e4>
 8004660:	1b80      	subs	r0, r0, r6
 8004662:	6060      	str	r0, [r4, #4]
 8004664:	6863      	ldr	r3, [r4, #4]
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	2300      	movs	r3, #0
 800466a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466e:	e7aa      	b.n	80045c6 <_printf_i+0x146>
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	4632      	mov	r2, r6
 8004674:	4649      	mov	r1, r9
 8004676:	4640      	mov	r0, r8
 8004678:	47d0      	blx	sl
 800467a:	3001      	adds	r0, #1
 800467c:	d0ad      	beq.n	80045da <_printf_i+0x15a>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	079b      	lsls	r3, r3, #30
 8004682:	d413      	bmi.n	80046ac <_printf_i+0x22c>
 8004684:	68e0      	ldr	r0, [r4, #12]
 8004686:	9b03      	ldr	r3, [sp, #12]
 8004688:	4298      	cmp	r0, r3
 800468a:	bfb8      	it	lt
 800468c:	4618      	movlt	r0, r3
 800468e:	e7a6      	b.n	80045de <_printf_i+0x15e>
 8004690:	2301      	movs	r3, #1
 8004692:	4632      	mov	r2, r6
 8004694:	4649      	mov	r1, r9
 8004696:	4640      	mov	r0, r8
 8004698:	47d0      	blx	sl
 800469a:	3001      	adds	r0, #1
 800469c:	d09d      	beq.n	80045da <_printf_i+0x15a>
 800469e:	3501      	adds	r5, #1
 80046a0:	68e3      	ldr	r3, [r4, #12]
 80046a2:	9903      	ldr	r1, [sp, #12]
 80046a4:	1a5b      	subs	r3, r3, r1
 80046a6:	42ab      	cmp	r3, r5
 80046a8:	dcf2      	bgt.n	8004690 <_printf_i+0x210>
 80046aa:	e7eb      	b.n	8004684 <_printf_i+0x204>
 80046ac:	2500      	movs	r5, #0
 80046ae:	f104 0619 	add.w	r6, r4, #25
 80046b2:	e7f5      	b.n	80046a0 <_printf_i+0x220>
 80046b4:	08004871 	.word	0x08004871
 80046b8:	08004882 	.word	0x08004882

080046bc <memmove>:
 80046bc:	4288      	cmp	r0, r1
 80046be:	b510      	push	{r4, lr}
 80046c0:	eb01 0402 	add.w	r4, r1, r2
 80046c4:	d902      	bls.n	80046cc <memmove+0x10>
 80046c6:	4284      	cmp	r4, r0
 80046c8:	4623      	mov	r3, r4
 80046ca:	d807      	bhi.n	80046dc <memmove+0x20>
 80046cc:	1e43      	subs	r3, r0, #1
 80046ce:	42a1      	cmp	r1, r4
 80046d0:	d008      	beq.n	80046e4 <memmove+0x28>
 80046d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046da:	e7f8      	b.n	80046ce <memmove+0x12>
 80046dc:	4402      	add	r2, r0
 80046de:	4601      	mov	r1, r0
 80046e0:	428a      	cmp	r2, r1
 80046e2:	d100      	bne.n	80046e6 <memmove+0x2a>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ee:	e7f7      	b.n	80046e0 <memmove+0x24>

080046f0 <_sbrk_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4d06      	ldr	r5, [pc, #24]	@ (800470c <_sbrk_r+0x1c>)
 80046f4:	2300      	movs	r3, #0
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f7fc ffdc 	bl	80016b8 <_sbrk>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_sbrk_r+0x1a>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_sbrk_r+0x1a>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	200002c0 	.word	0x200002c0

08004710 <memcpy>:
 8004710:	440a      	add	r2, r1
 8004712:	4291      	cmp	r1, r2
 8004714:	f100 33ff 	add.w	r3, r0, #4294967295
 8004718:	d100      	bne.n	800471c <memcpy+0xc>
 800471a:	4770      	bx	lr
 800471c:	b510      	push	{r4, lr}
 800471e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004726:	4291      	cmp	r1, r2
 8004728:	d1f9      	bne.n	800471e <memcpy+0xe>
 800472a:	bd10      	pop	{r4, pc}

0800472c <_realloc_r>:
 800472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004730:	4607      	mov	r7, r0
 8004732:	4614      	mov	r4, r2
 8004734:	460d      	mov	r5, r1
 8004736:	b921      	cbnz	r1, 8004742 <_realloc_r+0x16>
 8004738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4611      	mov	r1, r2
 800473e:	f7ff bc4d 	b.w	8003fdc <_malloc_r>
 8004742:	b92a      	cbnz	r2, 8004750 <_realloc_r+0x24>
 8004744:	f7ff fbde 	bl	8003f04 <_free_r>
 8004748:	4625      	mov	r5, r4
 800474a:	4628      	mov	r0, r5
 800474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004750:	f000 f81a 	bl	8004788 <_malloc_usable_size_r>
 8004754:	4284      	cmp	r4, r0
 8004756:	4606      	mov	r6, r0
 8004758:	d802      	bhi.n	8004760 <_realloc_r+0x34>
 800475a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800475e:	d8f4      	bhi.n	800474a <_realloc_r+0x1e>
 8004760:	4621      	mov	r1, r4
 8004762:	4638      	mov	r0, r7
 8004764:	f7ff fc3a 	bl	8003fdc <_malloc_r>
 8004768:	4680      	mov	r8, r0
 800476a:	b908      	cbnz	r0, 8004770 <_realloc_r+0x44>
 800476c:	4645      	mov	r5, r8
 800476e:	e7ec      	b.n	800474a <_realloc_r+0x1e>
 8004770:	42b4      	cmp	r4, r6
 8004772:	4622      	mov	r2, r4
 8004774:	4629      	mov	r1, r5
 8004776:	bf28      	it	cs
 8004778:	4632      	movcs	r2, r6
 800477a:	f7ff ffc9 	bl	8004710 <memcpy>
 800477e:	4629      	mov	r1, r5
 8004780:	4638      	mov	r0, r7
 8004782:	f7ff fbbf 	bl	8003f04 <_free_r>
 8004786:	e7f1      	b.n	800476c <_realloc_r+0x40>

08004788 <_malloc_usable_size_r>:
 8004788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800478c:	1f18      	subs	r0, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfbc      	itt	lt
 8004792:	580b      	ldrlt	r3, [r1, r0]
 8004794:	18c0      	addlt	r0, r0, r3
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
